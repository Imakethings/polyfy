#! /bin/bash

#adds totally awesome polygons to any wallpaper
#check if file is specified

usage () {
                echo "Incorrect use";
                echo "polyfy /path/to/file <options>";
                echo "Available options";
                echo "-b <number> - width of border (default: 10)";
                echo "-s <number> - size of triangle as a fraction of image height (default: 3)";
                echo "triangle|diamond|square - what shape to draw";
                echo "over|under|none - if the second polygon is drawn over or under the first (default: over)";
                exit 1;
}

getinfo () {
        filename=$(identify -format "%t" $file);
        directory=$(identify -quiet -format "%d" $file);
        format=$(identify -format "%e" $file);
        imagewidth=$(identify -format "%w" $file);
        imageheight=$(identify -format "%h" $file);
}

triangle () {
        length=$(echo "$imageheight/${size//[^0-9-.]/}" | bc -l | awk '{print int($1+0.5)}');
        height=$(echo "$length * sqrt(3) / 2" | bc -l | awk '{print int($1+0.5)}');
        points;
        draw1="M $point1,$pointa $point2,$pointb $point3,$pointb Z";
        draw2="M $point1,$pointb $point2,$pointa $point3,$pointa Z";
}

square () {
        length=$(echo "$imageheight/${size//[^0-9-.]/}" | bc -l | awk '{print int($1+0.5)}');
        height=$length;
        points;
        pluslength=$(echo "sqrt(($length^2)*2)/2" | bc -l | awk '{print int($1+0.5)}');
        point4=$((point1+pluslength));
        point5=$((point1-pluslength));
        pointd=$((pointc+pluslength));
        pointe=$((pointc-pluslength));
        draw1="M $point2,$pointb $point2,$pointa $point3,$pointa $point3,$pointb Z";
        draw2="M $point4,$pointc $point1,$pointd $point5,$pointc $point1,$pointe Z";
}

diamond () {
        square
        draw1="M $point4,$pointc $point1,$pointd $point5,$pointc $point1,$pointe Z";
        draw2="M $point2,$pointb $point2,$pointa $point3,$pointa $point3,$pointb Z";
}

points () {
        point1=$((imagewidth/2));
        pointa=$((imageheight/2-height/2));
        point2=$((imagewidth/2-length/2));
        pointb=$((imageheight/2+height/2));
        point3=$((imagewidth/2+length/2));
        pointc=$((imageheight/2));
}

borderzero () {
        if [ $borderwidth -eq 0 ]; then
                draw1=""
                draw2=""
                draw=""
        fi
}

#variables
bordercolor="white"
borderwidth="10"
channel="rgb"
size="3"
file="$1"; shift
shape="diamond"

#get file name
if [ ! -f $file ]; then
        usage
fi

#get options
for i in "$@"
do
        case $1 in
                r|g|b|rg|rb|gr|br|gb|bg|rgb|rbg|brg|bgr|grb|gbr)
                        channel="$1"
                        shift
                        ;;
                -b|--borderwidth)
                        borderwidth="$2"
                        shift 2
                        ;;
                -s|--size)
                        size="$2"
                        shift 2
                        ;;
                triangle|square|diamond)
                        shape="$1"
                        shift
                        ;;
                over)
                        shift
                        ;;
                under)
                        step3="convertunder"
                        shift
                        ;;
                none)
                        step3="convertnone"
                        shift
                        ;;
                *)
                        ;;
        esac
done

getinfo
$shape
negate="-channel ${channel//[^rgb]/} -negate"
draw="$draw1 $draw2"

#conversion with imagemagick
convertunder () {
        convert $file -stroke $bordercolor -strokewidth ${borderwidth//[^0-9]/} -fill none -draw "path '$draw2'" /tmp/polyfy1.$format
        draw="$draw1"
        file="/tmp/polyfy1.$format"
}
convertnone () {
        draw="$draw1"
}

convert -size "$imagewidth"x"$imageheight" xc:none -fill black -draw "path '$draw1'" /tmp/polyfy1.png #make the matte
#cut out the first polygon from the original image and negate it
convert $file /tmp/polyfy1.png -alpha set -compose Dstin -composite $negate /tmp/polyfy2.png 
borderzero #check if borderwidth is zero
$step3 #option to place second polygon underneath the first
convert -gravity center $file /tmp/polyfy2.png -compose Over -composite  /tmp/polyfy3.png #combine the first polygon and the original image
convert /tmp/polyfy3.png -stroke $bordercolor -strokewidth ${borderwidth//[^0-9]/} -fill none -draw "path '$draw'" $directory/$filename-polyfy.$format #draw the borders and output the finished image

#rm -f /tmp/polyfy1.$format #remove temporary files

echo "file saved to "$directory"/"$filename"-polify."$format"" #output where the finished image was saved

